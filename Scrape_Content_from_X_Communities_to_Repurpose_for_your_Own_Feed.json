{
  "name": "Scrape Content from X Communities to Repurpose for your Own Feed",
  "nodes": [
    {
      "parameters": {
        "content": "## üöÄ X Community Analyzer & Content Generator\n\n**Purpose**: This workflow scrapes tweets from a specific X.com community, analyzes them to find top-performing content, and then uses AI to generate new, similar tweets.\n\n**How it works**:\n1. **Manual Trigger**: You provide the X.com Community ID.\n2. **Fetch Tweets**: It calls the twitterapi.io endpoint to get the latest 100 tweets from that community.\n3. **Store Raw Data**: All fetched tweets are stored in a Google Sheet for logging and analysis.\n4. **Rank & Filter**: The tweets are ranked by reply count, and the top 10 are selected.\n5. **AI Content Generation**: The top 10 tweets are sent to an AI model as examples to generate 5 new, high-quality tweets in a similar style.\n6. **Save Generated Content**: The new AI-generated tweets are saved to another Google Sheet.\n\n**Required Setup**:\n- **Twitter API Credentials**: You need a valid API key from twitterapi.io for the 'Fetch Community Tweets' node.\n- **Google Sheets Credentials**: You need to configure credentials for both Google Sheets nodes.\n- **Google Sheet IDs**: You need to provide the Spreadsheet ID for both the raw data and generated content sheets.",
        "height": 450,
        "width": 720
      },
      "id": "e614d2af-3825-42f1-9dfd-39e765e0c257",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        900,
        -580
      ]
    },
    {
      "parameters": {},
      "id": "534f4646-29c9-40d5-aaef-a121144974ba",
      "name": "Manual",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        400,
        -80
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY",
          "mode": "list",
          "cachedResultName": "n8n X Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "Tweet by": "={{ $json.tweets[0].author.userName }}",
            "Text Content": "={{ $json.tweets[0].text }}",
            "Reply Count": "={{ $json.tweets[0].replyCount }}",
            "Like Count": "={{ $json.tweets[0].likeCount }}",
            "Tweet URL": "={{ $json.tweets[0].twitterUrl }}",
            "Profile Descriptrion": "={{ $json.tweets[0].author.description }}",
            "Profile User Name": "={{ $json.tweets[0].author.url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Tweet by",
              "displayName": "Tweet by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Text Content",
              "displayName": "Text Content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Reply Count",
              "displayName": "Reply Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Like Count",
              "displayName": "Like Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Tweet URL",
              "displayName": "Tweet URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Profile User Name",
              "displayName": "Profile User Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Profile Descriptrion",
              "displayName": "Profile Descriptrion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "4372fb61-c391-46f5-96ba-001c3407f424",
      "name": "Store All Tweets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [
        1060,
        -80
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zG3QTvRQlgzNwHZs",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ‚¨áÔ∏è 1. Grab tweets from previous node\nconst tweets = $('Fetch Tweets with Query').first().json.tweets;\nif (!Array.isArray(tweets)) {\n\treturn [{ error: 'No tweets found or invalid data structure' }];\n}\n\n// ‚¨áÔ∏è 2. Rank & pick the top-10 by replyCount\nconst top10 = [...tweets]\n\t.sort((a, b) => (b.replyCount ?? 0) - (a.replyCount ?? 0))\n\t.slice(0, 10);\n\n// ‚¨áÔ∏è 3. Helper ‚Üí chunk into batches of 5\nconst chunk = (arr, size) =>\n\tarr.reduce((acc, _, i) => (i % size ? acc : [...acc, arr.slice(i, i + size)]), []);\n\n// ‚¨áÔ∏è 4. Build prompt for each batch\nconst batches = chunk(top10, 5);\nconst items = batches.map((batch, batchIdx) => {\n\tlet examplesTxt = `Here are the top-performing tweets (batch ${batchIdx + 1}).\\nAnalyze their structure, tone and topic:\\n\\n`;\n\tconst cleanExamples = [];           // <-- purely the trimmed data you asked for\n\n\tbatch.forEach((tw, i) => {\n\t\tconst text = tw.text.replace(/\\s+/g, ' ').trim();  // squash excess whitespace\n\t\texamplesTxt += `Example ${i + 1}:\\n\"${text}\"\\nLikes: ${tw.likeCount} ‚Ä¢ Replies: ${tw.replyCount} ‚Ä¢ Retweets: ${tw.retweetCount}\\n---\\n`;\n\t\tcleanExamples.push({\n\t\t\ttext,\n\t\t\tlikes: tw.likeCount,\n\t\t\treplies: tw.replyCount,\n\t\t\tretweets: tw.retweetCount,\n\t\t});\n\t});\n\n\t// ‚¨áÔ∏è 5. Prompt that forces JSON output & audience tag\n\tconst prompt = `${examplesTxt}\nGenerate **exactly 1 new tweets based on the learning from all the tweets and give weightage to content that has higher reply count**. \nReturn a **single JSON object** with keys \"tweet 1\" through \"tweet 5\".\nEach value must be an object containing:\n  ‚Ä¢ \"content\"   ‚Äì tweet text (‚â§ 280 chars, line-breaks OK)  \n  ‚Ä¢ \"community\" ‚Äì 1-line note on which audience would engage most (e.g., \"AI founders\", \"No-code makers\").\nDo not add any other keys, commentary, or markdown.`;\n\n\treturn {\n\t\tbatch: batchIdx + 1,\n\t\tprompt// pure content+stats, per your request\n\t};\n});\n\n// ‚¨áÔ∏è 6. Return one item per batch to the next node\nreturn items;"
      },
      "id": "0af024af-c0d3-4fd1-9177-14240b89d8a5",
      "name": "Rank, Filter & Prepare Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        -80
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are an expert social media content creator specializing in X.com. Your task is to analyze top-performing tweets and generate new, engaging content that mimics their style, tone, and format to maximize engagement and replies.\n\n\n"
        }
      },
      "id": "49012218-67b0-4316-8a2b-bca32cbc8001",
      "name": "AI Content Generation Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1500,
        -80
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-sonnet-20241022",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 3.5 (New)"
        },
        "options": {}
      },
      "id": "e48d33e7-d381-4fc0-8542-912d8ddd0a8d",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1588,
        140
      ],
      "credentials": {
        "anthropicApi": {
          "id": "viKNSDr45kuPChjC",
          "name": "Claude"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.first().json.tweets;\n\nif (!Array.isArray(tweets)) {\n  console.log('Tweets data is not an array or is missing.');\n  return [{ error: 'No tweets found or invalid data structure' }];\n}\n\n// 1. Map tweets to the desired format\nconst extractedData = tweets.map(tweet => ({\n  \"Date\":tweet.createdAt,\n  \"Tweet by\": tweet.author.name,\n  \"Text Content\": tweet.text,\n  \"Reply Count\": tweet.replyCount,\n  \"Like Count\": tweet.likeCount,\n  \"Tweet URL\": tweet.url,\n  \"Profile User Name\": tweet.author.userName,\n  \"Profile Descriptrion\": tweet.author.profile_bio.description,\n})); \n\nreturn extractedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        -80
      ],
      "id": "a5f8a741-1ad0-4227-8af0-dc52d89d79cf",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "\"AI Models\" min_faves:100 min_replies:50 min_retweets:10"
            },
            {
              "name": "queryType",
              "value": "Top"
            }
          ]
        },
        "options": {}
      },
      "id": "97f12abb-ce56-480f-b852-788417676e47",
      "name": "Fetch Tweets with Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        620,
        -80
      ],
      "credentials": {
        "httpCustomAuth": {
          "id": "ys7qSjsAnBaEFLRi",
          "name": "Apollo API KEY"
        },
        "httpHeaderAuth": {
          "id": "ry0m0gIivyg5zRep",
          "name": "Twitter IO Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY",
          "mode": "list",
          "cachedResultName": "n8n X Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 961028548,
          "mode": "list",
          "cachedResultName": "Generated Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Y-PDbyHYuLqOHsiuUkJho8s5NmNpvS2ZJu-jMCDvRdY/edit#gid=961028548"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Text": "={{ $json.output }}",
            "TimeStamp": "={{$now.format(\"DD MMM YYYY HH:mm\")}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "TimeStamp",
              "displayName": "TimeStamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Text",
              "displayName": "Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "0758873c-1840-4483-bf6c-bbf7be30c68f",
      "name": "Store Generated Content",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [
        1880,
        -80
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zG3QTvRQlgzNwHZs",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## üë• Built by Akshat & Yashika\n\n### We craft high-performance `n8n` workflows that turn ideas into automation‚Äîboosting your content, operations, and growth with AI.\n---\n## üöÄ Want a custom AI automation workflow for your business?\n\n## **Book a free 18-min discovery call:**\nüìÖ [cal.com/akshatbahety/ai18min](https://cal.com/akshatbahety/ai18min)\n\n### Let us show you how we can streamline your processes and content strategy using n8n + AI.\n\n---\n## üîó Connect with Us\n\n### **Akshat Bahety** ‚Üí üé• [YouTube](https://youtube.com/akshatbahety)\n### **Yashika S** ‚Üí üíº [LinkedIn](https://www.linkedin.com/in/yashika-s-15852618b/)\n\n### Let‚Äôs build smarter workflows‚Äîfaster.\n",
        "height": 600,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -340,
        -360
      ],
      "typeVersion": 1,
      "id": "401434cb-dda6-41d2-844d-e19099fa28c5",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual": {
      "main": [
        [
          {
            "node": "Fetch Tweets with Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank, Filter & Prepare Prompt": {
      "main": [
        [
          {
            "node": "AI Content Generation Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Generation Agent": {
      "main": [
        [
          {
            "node": "Store Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Content Generation Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Store All Tweets": {
      "main": [
        [
          {
            "node": "Rank, Filter & Prepare Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Store All Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Tweets with Query": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c2c0c09b-513c-4832-b8ac-1019a9ca0997",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "978ed56b8736092e631cbdca4d78bc50db42939dd28489bce0af73877740d18e"
  },
  "id": "dJLXgc6V8PJjH7YL",
  "tags": []
}